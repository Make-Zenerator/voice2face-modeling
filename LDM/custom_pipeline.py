import inspect
from typing import List, Optional, Tuple, Union

import torch
import torch.nn as nn
import torch.utils.checkpoint as checkpoint
from transformers import PretrainedConfig, PreTrainedModel
from transformers.activations import ACT2FN
from transformers.modeling_outputs import BaseModelOutput
from transformers.utils import logging

from diffusers.models import AutoencoderKL, UNet2DConditionModel, UNet2DModel, VQModel
from diffusers.schedulers import DDIMScheduler, LMSDiscreteScheduler, PNDMScheduler
from diffusers.utils.torch_utils import randn_tensor
from diffusers.pipelines.pipeline_utils import DiffusionPipeline, ImagePipelineOutput

class LDMSpeechToFacePipeline(DiffusionPipeline):
    r"""
    Pipeline for speech-to-face_image generation using latent diffusion.

    This model inherits from [`DiffusionPipeline`]. Check the superclass documentation for the generic methods
    implemented for all pipelines (downloading, saving, running on a particular device, etc .).

    Parameters:
        vqvae ([`VQModel]):
            Vector=-quantized (VQ) model to encode and decode images to and from latent representations.
        sf2f ([`SF2F Voice Encoder`]):
            Voice-encoder model based on [`SF2F Voice Encoder].
            input: mel-spectrogram or mfcc
        unet ([`UNet2DConditionModel`]):
            A `UNet2DConditionModel` to denoise the encoded image latents.
        scheduler ([`SchedulerMixin`]):
            A scheduler to be used in combination with `unet` to denoise the encoded image latent. Can be one of
            [`DDIMScheduler`], [`LMSDiscreteScheduler`], or [`PNDMScheduler`].
    """

    model_cpu_offload_seq = "sf2f->unet->vqvae"

    def __init__(
            self,
            vqvae: Union[VQModel, AutoencoderKL],
            sf2f: PreTrainedModel,
            unet: Union[UNet2DConditionModel, UNet2DModel],
            scheduler: Union[DDIMScheduler, PNDMScheduler, LMSDiscreteScheduler],
    ):
        super().__init__()
        self.register_modules(vqvae=vqvae, sf2f=sf2f, unet=unet, scheduler=scheduler)
        self.vae_scale_factor = 2 ** (len(self.vqvae.config.block_out_channels) - 1)

    @torch.no_grad()
    def __call__(
        self,
        voice: Union[torch.Tensor, List[torch.Tensor]],
        height: Optional[int] = None,
        width: Optional[int] = None,
        num_inference_steps: Optional[int] = 50,
        guidance_scale: Optional[float] = 1.0,
        eta: Optional[float] = 0.0,
        generator: Optional[Union[torch.Generator, List[torch.Generator]]] = None,
        latents: Optional[torch.Tensor] = None,
        output_type: Optional[str] = "pil",
        return_dict: bool = True,
        **kwargs,
    ) -> Union[Tuple, ImagePipelineOutput]:
        r"""
        The call function to the pipeline for generation.

        Args:
            voice (`torch.Tensor`, `List[torch.Tensor]`):
                The input voice data for processing sf2f voice encoder.
            height (`int`, *optional*, defaults to `self.unet.config.sample_size * self.vae_scale_factor`):
                The height in pixels of the generated image.
            width (`int`, *optional*, defaults to `self.unet.config.sample_size * self.vae_scale_factor`):
                The width in pixels of the generated image.
            num_inference_steps (`int`, *optional*, defaults to 50):
                The number of denoising steps. More denoising steps usually lead to a higher quality image at the
                expense of slower inference.
            guidance_scale (`float`, *optional*, defaults to 1.0):
                A higher guidance scale value encourages the model to generate images closely linked to the voice
                `voice` at the expense of lower image quality. Guidance scale is enabled when `guidance_scale > 1`.
            generator (`torch.Generator`, *optional*):
                A [`torch.Generator`](https://pytorch.org/docs/stable/generated/torch.Generator.html) to make
                generation deterministic.
            latents (`torch.Tensor`, *optional*):
                Pre-generated noisy latents sampled from a Gaussian distribution, to be used as inputs for image
                generation. Can be used to tweak the same generation with different voices. If not provided, a latents
                tensor is generated by sampling using the supplied random `generator`.
            output_type (`str`, *optional*, defaults to `"pil"`):
                The output format of the generated image. Choose between `PIL.Image` or `np.array`.
            return_dict (`bool`, *optional*, defaults to `True`):
                Whether or not to return a [`ImagePipelineOutput`] instead of a plain tuple.
        """
        if isinstance(voice, torch.Tensor):
            batch_size = 1
        elif isinstance(voice, list):
            batch_size = len(voice)
        else:
            raise ValueError(f"`voice` has to be of type `torch.Tensor` or `list[torch.Tensor]` but is {type(voice)}.")
        
        if height % 8 != 0 or width % 8 != 0:
            raise ValueError(f"`height` and `width` have to be divisible by 8 but are {height} and {width}.")
        
        if guidance_scale != 1.0:
            uncond_input = torch.zeros_like(voice)
            negative_voice_embeds = self.sf2f(uncond_input.to(self._execution_device))
        
        voice_embeds = self.sf2f(voice.to(self._execution_device))

        latents_shape = (batch_size, self.unet.config.in_channels, height // 8, width // 8)
        if isinstance(generator, list) and len(generator) != batch_size:
            raise ValueError(
                f"You have passed a list of generators of length {len(generator)}, but requested an effective bath"
                f"size of {batch_size}. Make sure the batch size matches the length of the generators."
            )
        
        if latents is None:
            latents = randn_tensor(
                latents_shape, generator=generator, device=self._execution_device, dtype=voice_embeds.dtype
            )
        else:
            if latents.shape != latents_shape:
                raise ValueError(f"Unexpected latents shape, got {latents.shape}, expected {latents_shape}")
        latents = latents.to(self._execution_device)

        self.scheduler.set_timesteps(num_inference_steps)

        accepts_eta = "eta" in set(inspect.signature(self.scheduler.step).parameters.keys())

        extra_kwargs = {}
        if accepts_eta:
            extra_kwargs["eta"] = eta

        for t in self.progress_bar(self.scheduler.timesteps):
            if guidance_scale == 1.0:
                latents_input = latents
                context = voice_embeds
            else:
                latents_input = torch.cat([latents] * 2)
                context = torch.cat([negative_voice_embeds, voice_embeds])

            noise_pred = self.unet(latents_input, t, encoder_hidden_states=context).sample

            if guidance_scale != 1.0:
                noise_pred_uncond, noise_prediction_voice = noise_pred.chunk(2)
                noise_pred = noise_pred_uncond + guidance_scale * (noise_prediction_voice - noise_pred_uncond)
            latents = self.scheduler.step(noise_pred, t, latents, **extra_kwargs).prev_sample

        latents = 1 / self.vqvae.config.scaling_factor * latents
        image = self.vqvae.decode(latents).sample

        image = (image / 2 + 0.5).clamp(0, 1)
        image = image.cpu().permute(0, 2, 3, 1).numpy()
        if output_type == "pil":
            image = self.numpy_to_pil(image)

        if not return_dict:
            return (image, )
        
        return ImagePipelineOutput(images=image)
    